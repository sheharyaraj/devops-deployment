name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  FRONTEND_IMAGE: sheri1/pp-app-frontend
  BACKEND_IMAGE: sheri1/pp-app-backend
  
jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test 
        continue-on-error: false

      - name: Lint Code
        run: npm run lint
      
      - name: Install Semgrep
        run: pip install semgrep

      - name: Run SAST Analysis
        run: semgrep --config "auto"


      - name: Set Image Tag
        id: image_tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }} frontend
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: frontend/test-results


  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install --prefix backend

      - name: Lint Code
        run: npm run lint --prefix backend
      
      - name: Run SAST Analysis
        run: semgrep --config "auto" backend/

      - name: Set Image Tag
        id: image_tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }} frontend
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      

