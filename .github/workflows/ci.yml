name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  FRONTEND_IMAGE: sheri1/pp-app-frontend
  BACKEND_IMAGE: sheri1/pp-app-backend
  
jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: frontend-${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            frontend-${{ runner.os }}-node-modules-

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test 
        continue-on-error: false

      - name: Lint Code
        run: npm run lint
      
      - name: Install Semgrep
        run: pip install semgrep

      - name: Run SAST Analysis
        run: semgrep --config "auto"


      - name: Set Image Tag
        id: image_tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }} .
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: frontend/test-results


  backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: backend-${{ runner.os }}-node-modules-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            backend-${{ runner.os }}-node-modules-

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install --prefix backend

      - name: Lint Code
        run: npm run lint --prefix backend

      - name: Install Semgrep
        run: pip install semgrep
      
      - name: Run SAST Analysis
        run: semgrep --config "auto" backend/

      - name: Set Image Tag
        id: image_tag
        run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }} backend
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ env.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}


  terraform:
    runs-on: ubuntu-latest
    needs:
      - frontend
      - backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - frontend
      - backend
      - terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.24.0'

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.9.0'

      - name: Configure kubectl
        run: |
          aws eks --region us-east-1 update-kubeconfig --name demo

      - name: Deploy with Helm
        run: |
          helm upgrade --install frontend-release ./k8s/helm-charts/frontend --namespace default
          helm upgrade --install backend-release ./k8s/helm-charts/backend --namespace default
      

